{"version":3,"sources":["Header.tsx","GridCell.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","useState","expanded","setExpanded","className","onClick","GridCell","props","color","isRunning","toggleCell","style","backgroundColor","cols","initialDeadCell","state","age","initialAliveCell","speeds","colorThemes","name","colors","shapes","App","setIsRunning","currentColor","setCurrentColor","currentSpeed","setCurrentSpeed","generation","setGeneration","Array","from","length","rows","v","i","gridCells","setGridCells","generationUpdate","newGridCells","arrayLength","cell","adjacentAlive","isAlive","push","useEffect","timer","window","setInterval","clearInterval","map","theme","index","shape","middle","setShape","disabled","clearGrid","type","min","max","value","id","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9aea720.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./Header.css\";\r\n\r\nexport const Header: React.FC = () => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  return (\r\n    <header className=\"header\">\r\n      CONWAY COLOR LIFE\r\n      <div className=\"description\">\r\n        Conway Color Life is an example of a cellular automaton, a collection of cells that change over time based on a set of simple rules. Click cells to turn them alive, and then press the Start button to see what happens.\r\n        {!expanded && <div className=\"expand\" onClick={() => setExpanded(true)}>Learn More<i className=\"fas fa-angle-down icon\" /></div>}\r\n        {expanded &&\r\n          <div className=\"more-content\">\r\n            <div>Cells are either alive or dead. At each generation a cell is marked as alive or dead based on the following rules:</div>\r\n            <ul>\r\n              <li>A living cell with less than 2 neighbors dies</li>\r\n              <li>A living cell with 2 or 3 neighbors lives</li>\r\n              <li>A living cell with more than 3 neighbors dies</li>\r\n              <li>A dead cell with 3 living neighbors becomes alive</li>\r\n            </ul>\r\n            <div>With each generation that a cell survives, the cell ages. Cells change color as they age based on the selected color theme.</div>\r\n            <div className=\"expand\" onClick={() => setExpanded(false)}>Less<i className=\"fas fa-angle-up icon\" /></div>\r\n          </div>\r\n        }\r\n      </div>\r\n    </header>\r\n  );\r\n}","import React from \"react\";\r\n\r\nimport \"./GridCell.css\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  toggleCell: () => void;\r\n  isRunning: boolean;\r\n  color: string;\r\n}\r\n\r\nexport const GridCell: React.FC<IProps> = (props) => {\r\n  const { color, isRunning, toggleCell} = props;\r\n  return (\r\n    <div className=\"cell\" style={{backgroundColor: color}} onClick={() => !isRunning && toggleCell()}/>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\nimport { Header } from \"./Header\";\nimport { GridCell } from \"./GridCell\";\n\nimport \"./App.css\";\n\nconst rows = 50;\nconst cols = 50;\ninterface Cell {\n  state: number,\n  age: number;\n}\nconst initialDeadCell: Cell = {state: 0, age: 0};\nconst initialAliveCell: Cell = {state: 1, age: 0};\n\nconst speeds: number[] = [500, 250, 100];\n\ninterface ColorTheme {\n  name: string,\n  colors: string[]\n}\n\nconst colorThemes: ColorTheme[] = [\n  { name: \"Purple-Yellow\",\n    colors: [\"#8400ab\", \"#bb009d\", \"#e50089\", \"#ff0073\", \"#ff355b\", \"#ff6543\", \"#ff8e2a\", \"#ffb407\", \"#ffd900\", \"#fcfb2d\",\n    \"#ffd900\", \"#ffb407\", \"#ff8e2a\", \"#ff6543\", \"#ff355b\", \"#ff0073\", \"#e50089\", \"#bb009d\", \"#8400ab\"]\n  },\n  { name: \"Green-Red\",\n    colors: [\"#00ff00\", \"#6fed00\", \"#98db00\", \"#b6c700\", \"#cdb200\", \"#df9b00\", \"#ee8200\", \"#f86600\", \"#fe4400\", \"#ff0000\",\n      \"#fe4400\", \"#f86600\", \"#ee8200\", \"#df9b00\", \"#cdb200\", \"#b6c700\", \"#98db00\", \"#6fed00\", \"#00ff00\"]\n  },\n  { name: \"Orange-Blue\",\n    colors: [\"#ff7e00\", \"#ff5e1c\", \"#ff2e33\", \"#ff004a\", \"#ff0064\", \"#ff0081\", \"#f100a0\", \"#cf00c1\", \"#9900e2\", \"#0000ff\",\n      \"#9900e2\", \"#cf00c1\", \"#f100a0\", \"#ff0081\", \"#ff0064\", \"#ff004a\", \"#ff2e33\", \"#ff5e1c\", \"#00ff00\"]\n  },\n  { name: \"Rainbow\",\n    colors: [\"#ff0000\", \"#FF7F00\", \"#FFFF00\", \"#00FF00\", \"#0000FF\", \"#4B0082\", \"#9400D3\", \"#4B0082\", \"#0000FF\", \"#00FF00\", \"#FFFF00\", \"#FF7F00\", \"#ff0000\"]\n  },\n  { name: \"Pinks\",\n    colors: [\"#fa6e6e\", \"#ff6374\", \"#ff587c\", \"#ff4b86\", \"#ff3d92\", \"#ff2da0\", \"#ff1ab0\", \"#ff02c1\", \"#ff00d4\", \"#ff00e8\",\n      \"#ff00d4\", \"#ff02c1\", \"#ff1ab0\", \"#ff2da0\", \"#ff3d92\", \"#ff4b86\", \"#ff587c\", \"#ff6374\", \"#fa6e6e\"]\n  },\n];\n\ninterface Shape {\n  name: string,\n}\n\nconst shapes: Shape[] = [\n  { name: \"U\" },\n  { name: \"Big Mug\" },\n  { name: \"Double U\" },\n  { name: \"Glider\" },\n  { name: \"R-Pentomino\" },\n];\n\nfunction App() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentColor, setCurrentColor] = useState(0);\n  const [currentSpeed, setCurrentSpeed] = useState(1);\n  const [generation, setGeneration] = useState(0);\n  const [gridCells, setGridCells] = useState(Array.from({length: rows * cols}, (v, i) => initialDeadCell));\n\n  const toggleCell = (index: number) => {\n    const newGridCells = [...gridCells];\n    newGridCells[index] = newGridCells[index].state === 0 ? initialAliveCell : initialDeadCell;\n    setGridCells(newGridCells);\n  }\n\n  const clearGrid = () => {\n    const newGridCells = Array.from({length: rows * cols}, (v, i) => initialDeadCell);\n    setGridCells(newGridCells);\n    setGeneration(0);\n  }\n\n  const setShape = (shape: string) => {\n    const newGridCells = Array.from({length: rows * cols}, (v, i) => initialDeadCell);\n    const middle = rows * cols * .5 - rows * .5;\n    if (shape === \"R-Pentomino\") {\n      newGridCells[middle - 1] = {state: 1, age: 0};\n      newGridCells[middle] = {state: 1, age: 0};\n      newGridCells[middle - rows] = {state: 1, age: 0};\n      newGridCells[middle - rows + 1] = {state: 1, age: 0};\n      newGridCells[middle + rows] = {state: 1, age: 0};\n    } else if (shape === \"U\") {\n      newGridCells[middle - 1] = {state: 1, age: 0};\n      newGridCells[middle] = {state: 1, age: 0};\n      newGridCells[middle + 1] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows * 2] = {state: 1, age: 0};\n    } else if (shape === \"Big Mug\") {\n      newGridCells[middle - 5] = {state: 1, age: 0};\n      newGridCells[middle - 2] = {state: 1, age: 0};\n      newGridCells[middle - 1] = {state: 1, age: 0};\n      newGridCells[middle] = {state: 1, age: 0};\n      newGridCells[middle + 1] = {state: 1, age: 0};\n      newGridCells[middle + 2] = {state: 1, age: 0};\n      newGridCells[middle + 5] = {state: 1, age: 0};\n\n      newGridCells[middle - 5 + rows] = {state: 1, age: 0};\n      newGridCells[middle - 4 + rows] = {state: 1, age: 0};\n      newGridCells[middle - 3 + rows] = {state: 1, age: 0};\n      newGridCells[middle - 2 + rows] = {state: 1, age: 0};\n      newGridCells[middle - 1 + rows] = {state: 1, age: 0};\n      newGridCells[middle + rows] = {state: 1, age: 0};\n      newGridCells[middle + 1 + rows] = {state: 1, age: 0};\n      newGridCells[middle + 2 + rows] = {state: 1, age: 0};\n      newGridCells[middle + 3 + rows] = {state: 1, age: 0};\n      newGridCells[middle + 4 + rows] = {state: 1, age: 0};\n      newGridCells[middle + 5 + rows] = {state: 1, age: 0};\n\n      newGridCells[middle - 2 + rows * 2] = {state: 1, age: 0};\n      newGridCells[middle - 1 + rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 + rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + 2 + rows * 2] = {state: 1, age: 0};\n\n      newGridCells[middle - 5 - rows] = {state: 1, age: 0};\n      newGridCells[middle - 4 - rows] = {state: 1, age: 0};\n      newGridCells[middle - 3 - rows] = {state: 1, age: 0};\n      newGridCells[middle - 2 - rows] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows] = {state: 1, age: 0};\n      newGridCells[middle - rows] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows] = {state: 1, age: 0};\n      newGridCells[middle + 2 - rows] = {state: 1, age: 0};\n      newGridCells[middle + 3 - rows] = {state: 1, age: 0};\n      newGridCells[middle + 4 - rows] = {state: 1, age: 0};\n      newGridCells[middle + 5 - rows] = {state: 1, age: 0};\n\n      newGridCells[middle + 2 - rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows * 2] = {state: 1, age: 0};\n      newGridCells[middle - rows * 2] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows * 2] = {state: 1, age: 0};\n      newGridCells[middle - 2 - rows * 2] = {state: 1, age: 0};\n    } else if (shape === \"Double U\") {\n      newGridCells[middle - 1 - 2] = {state: 1, age: 0};\n      newGridCells[middle - 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 - 2] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows - 2] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows * 2 - 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows - 2] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows * 2 - 2] = {state: 1, age: 0};\n\n      newGridCells[middle - 1 + 3] = {state: 1, age: 0};\n      newGridCells[middle + 3] = {state: 1, age: 0};\n      newGridCells[middle + 1 + 3] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows + 3] = {state: 1, age: 0};\n      newGridCells[middle - 1 - rows * 2 + 3] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows + 3] = {state: 1, age: 0};\n      newGridCells[middle + 1 - rows * 2 + 3] = {state: 1, age: 0};\n    } else if (shape === \"Glider\") {\n      newGridCells[middle] = {state: 1, age: 0};\n      newGridCells[middle + rows + 1] = {state: 1, age: 0};\n      newGridCells[middle + rows + 2] = {state: 1, age: 0};\n      newGridCells[middle + rows * 2] = {state: 1, age: 0};\n      newGridCells[middle + rows * 2 + 1] = {state: 1, age: 0};\n    }\n    setGridCells(newGridCells);\n  }\n\n  const generationUpdate = () => {\n    const newGridCells: Cell[] = [];\n    const arrayLength = gridCells.length;\n    for (let cell = 0; cell < arrayLength; cell++) {\n      let adjacentAlive = 0;\n      // prev\n      adjacentAlive = adjacentAlive + (cell === 0 ? gridCells[rows * cols - 1].state : gridCells[cell - 1].state);\n      // next\n      adjacentAlive = adjacentAlive + (cell === (rows * cols - 1) ? gridCells[0].state : gridCells[cell + 1].state);\n      // row below\n      adjacentAlive = adjacentAlive + ((cell - cols - 1) < 0 ? gridCells[arrayLength + (cell - cols - 1)].state : gridCells[cell - cols - 1].state);\n      adjacentAlive = adjacentAlive + ((cell - cols) < 0 ? gridCells[arrayLength + (cell - cols)].state : gridCells[cell - cols].state);\n      adjacentAlive = adjacentAlive + ((cell - cols + 1) < 0 ? gridCells[arrayLength + (cell - cols + 1)].state : gridCells[cell - cols + 1].state);\n      // row above\n      adjacentAlive = adjacentAlive + ((cell + cols - 1) >= arrayLength ? gridCells[(cell + cols - 1) - arrayLength].state : gridCells[cell + cols - 1].state);\n      adjacentAlive = adjacentAlive + ((cell + cols) >= arrayLength ? gridCells[(cell + cols) - arrayLength].state : gridCells[cell + cols].state);\n      adjacentAlive = adjacentAlive + ((cell + cols + 1) >= arrayLength ? gridCells[(cell + cols + 1) - arrayLength].state : gridCells[cell + cols + 1].state);\n\n      const isAlive = gridCells[cell].state === 1;\n      if (adjacentAlive === 3 || (adjacentAlive === 2 && isAlive)) {\n        const age = gridCells[cell].age + 1;\n        newGridCells.push({age: isAlive ? age % colorThemes[currentColor].colors.length : 0, state: 1})\n      } else {\n        newGridCells.push(initialDeadCell);\n      }\n    }\n    setGridCells(newGridCells);\n    setGeneration(generation + 1);\n  }\n\n  useEffect(() => {\n    let timer: any;\n    if (isRunning) {\n      timer = window.setInterval(() => {\n        generationUpdate();\n      }, speeds[currentSpeed]);\n    }\n    return () => { // Return callback to run on unmount.\n      window.clearInterval(timer);\n    };\n  }, [isRunning, generationUpdate]); // Pass in empty array to run useEffect only on mount.\n\n  const handleChange = (event: any) => {\n    setCurrentSpeed(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"grid-container\">\n        <div className=\"themes\">\n          Choose Color Theme\n          { colorThemes.map((theme, i) =>\n              <button key={`theme-${i}`} onClick={() => setCurrentColor(i)}>{theme.name}</button>\n          )}\n        </div>\n\n        <div className=\"grid\">\n          { gridCells.map((cell, i) =>\n            <GridCell\n              key={`cell-${i}`}\n              index={i}\n              toggleCell={() => toggleCell(i)}\n              isRunning={isRunning}\n              color={cell.state === 0 ? \"aliceblue\" : colorThemes[currentColor].colors[cell.age]}\n            />\n          )}\n        </div>\n\n        <div className=\"shapes\">\n          Add Shape\n          { shapes.map((shape, i) =>\n              <button key={`shape-${i}`} onClick={() => setShape(shape.name)}>{shape.name}</button>\n          )}\n        </div>\n\n      </div>\n\n      <div className=\"generation\">Current Generation: {generation}</div>\n      <div className=\"control-buttons\">\n        <button disabled={isRunning} onClick={() => setIsRunning(true)}>Start</button>\n        <button disabled={!isRunning} onClick={() => setIsRunning(false)}>Stop</button>\n        <button disabled={isRunning} onClick={() => clearGrid()}>Clear</button>\n        <div className=\"slider-container\">\n          <input type=\"range\" min=\"0\" max=\"2\" value={currentSpeed} className=\"slider\" id=\"myRange\" onChange={handleChange} />\n          <div>\n            <span className=\"speed\">Slow</span>\n            <span className=\"speed\">Med</span>\n            <span className=\"speed\">Fast</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}